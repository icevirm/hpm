#!/usr/bin/env python3

import argparse
import os
import subprocess

from sqlite3 import connect, Error

HPM_DB = os.getenv('HPM_DB')
SRC_DIR = '/usr/src'


def get_package(target: str):
    '''
    This function returns package entry from database

    Args:
        target: str - target package
    '''
    try:
        conn = connect(HPM_DB)
        cursor = conn.cursor()

        cursor.execute('SELECT * FROM package_installation WHERE name = ?',
                    (target,))
        row = cursor.fetchone()

        if row is None:
            print('Package instructions not found')
            return

        package_struct = {
            'name': row[0],
            'version': row[1],
            'patch': row[2],
            'preinstall': row[3],
            'configure': row[4],
            'prebuild': row[5],
            'build': row[6],
            'postbuild': row[7],
            'test': row[8],
            'posttest': row[9],
            'install': row[10],
            'postinstall': row[11],
            'uninstall': row[12]
        }

        cursor.execute('SELECT url FROM package_info WHERE name = ? AND version = ?',
                       (package_struct['name'], package_struct['version'],))

        info_row = cursor.fetchone()

        if info_row is None:
            print('Package information not found')
            return

        package_struct['url'] = info_row[0]

    except Error as err:
        print(f'An error occured: {err}')
    
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

    return package_struct


def list_packages(installed: bool):
    '''
    This function list all packages in HPM DB.
    
    Args:
        installed: bool - True if required to output only installed packages
    '''
    try:
        conn = connect(HPM_DB)
        cursor = conn.cursor()

        if installed:
            cursor.execute('''SELECT name, version FROM package_info WHERE installed = 'yes';''')
        else:
            cursor.execute('SELECT name, version FROM package_info')

        row = cursor.fetchall()

        for package in row:
            print(f'{package[0]}-{package[1]}')
    
    except Error as err:
        print(f'An error occured: {err}')
    
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


def get_package_filename(package: dict):
    '''
    This function extracts archive name and filename from package URL

    Args:
        package: dict - package struct
    '''
    url = package['url']
    archive_filename = os.path.basename(url)

    # TODO: It works only with tarballs, change it to support any file
    package_dirname = archive_filename.split('.tar')[0]

    return archive_filename, package_dirname


def download_package(package: dict):
    '''
    This function downloads the package tarball using its url.

    Args:
        package: dict - package struct
    '''
    url = package['url']

    subprocess.run(['wget', '--no-check-certificate', '-nc', '-P', SRC_DIR, url])


def unpack_package(package: dict):
    '''
    This function unpacks the source tarball of the package and enter the directory

    Args:
        package: dict - package struct of the package to unpack
    '''
    os.chdir(SRC_DIR)
    
    archive_filename, package_dirname = get_package_filename(package)
    
    print(f'Unpacking {archive_filename}...')
    subprocess.run(['tar', '-xf', archive_filename], check=True)

    os.chdir(package_dirname)


def patch_package(package: dict):
    '''
    This function applies all available patches for the package

    Args:
        package: dict - package struct
    '''
    patches = [patch for patch in package['patch'].split('@@') if patch]

    for patch in patches:
        print(f'Patching {package["name"]} with {patch}...')
        subprocess.run(['patch', '-Np1', '-i', f'{SRC_DIR}/{patch}'])


def preinstall_package(package: dict):
    '''
    This function runs preinstallation scripts for the package

    Args:
        package: dict - package struct
    '''
    preinstall_scripts = [preinst for preinst in package['preinstall'].split('@@') if preinst]

    # List of exceptions: enter a separate build folder first
    if package['name'] in ['glibc', 'dejagnu', 'binutils', 'gcc', 'e2fsprogs']:
        os.mkdir('build')
        os.chdir('build')
    elif package['name'] in ['tcl']:
        os.chdir('unix')

    for preinstall_script in preinstall_scripts:
        print(f'Running preinstall script {preinstall_script}...')
        subprocess.run(preinstall_script, shell=True)


def configure_package(package: dict):
    '''
    This function configures the package

    Args:
        package: dict - package struct
    '''
    if package['configure'] == 'DEFAULT':
        configure_command = ['./configure', '--prefix=/usr']
    # List of exceptions: packages use separate folder to build
    elif package['name'] in ['glibc', 'dejagnu', 'binutils', 'gcc', 'e2fsprogs']:
        configure_command = ['../configure'] + package['configure'].split()
    else:
        configure_command = ['./configure'] + package['configure'].split()

    print(f'Configuring the package with config options: {configure_command}...')
    subprocess.run(configure_command)

def prebuild_package(package: dict):
    '''
    This function runs prebuild scripts for the package

    Args:
        package: dict - package struct
    '''
    prebuild_scripts = [prebuild for prebuild in package['prebuild'].split('@@') if prebuild]

    for prebuild_script in prebuild_scripts:
        print(f'Running prebuild script {prebuild_script}...')
        subprocess.run(prebuild_script, shell=True)


def build_package(package: dict):
    '''
    This function builds the package

    Args:
        package: dict - package struct
    '''
    if package['build'] == 'DEFAULT':
        build_command = ['make']
    else:
        build_command = ['make'] + package['build'].split()

    print(f'Building the package with options: {build_command}...')
    subprocess.run(build_command)


def postbuild_package(package: dict):
    '''
    This function runs postbuild scripts for the package

    Args:
        package: dict - package struct
    '''
    postbuild_scripts = [postbuild for postbuild in package['postbuild'].split('@@') if postbuild]

    for postbuild_script in postbuild_scripts:
        print(f'Running postbuild script {postbuild_script}...')
        subprocess.run(postbuild_script, shell=True)


def test_package(package: dict):
    '''
    This function run the tests for the package

    Args:
        package: dict - package struct
    '''
    if package['test'] == 'DEFAULT':
        test_command = ['make', 'check']
    else:
        test_command = ['make'] + package['test'].split()

    print(f'Testing the package with options: {test_command}...')
    subprocess.run(test_command)


def posttest_package(package: dict):
    '''
    This function runs post test scripts for the package

    Args:
        package: dict - package struct
    '''
    posttest_scripts = [posttest for posttest in package['posttest'].split('@@') if posttest]

    for posttest_script in posttest_scripts:
        print(f'Running post test script {posttest_script}...')
        subprocess.run(posttest_script, shell=True)


def install_package(package: dict):
    '''
    This function install the package

    Args:
        package: dict - package struct
    '''
    if package['install'] == 'DEFAULT':
        install_command = ['make', 'install']
    else:
        install_command = ['make'] + package['install'].split() + ['install']

    print(f'Installing the package with options: {install_command}...')
    subprocess.run(install_command)


def postinstall_package(package: dict):
    '''
    This function runs postinstall scripts for the package

    Args:
        package: dict - package struct
    '''
    postinstall_scripts = [postinstall for postinstall in package['postinstall'].split('@@') if postinstall]

    for postinstall_script in postinstall_scripts:
        print(f'Running postinstall script {postinstall_script}...')
        subprocess.run(postinstall_script, shell=True)


def cleanup(package: dict):
    '''
    This functions cleans everything up after installation or uninstallation

    Args:
        package: dict - package struct of the managed package
    '''
    os.chdir(SRC_DIR)

    _, package_dirname = get_package_filename(package)

    print('Deleting source directory...')
    subprocess.run(['rm', '-rf', package_dirname])


def full_install(package: dict):
    '''
    This function follow the workflow of full installation.
    This is the most common usage of this tool.

    Args:
        package: dict - package struct of the package to be installed
    '''
    print(f'Installing package {package["name"]}-{package["version"]}...')

    download_package(package)
    
    unpack_package(package)

    if package['patch'] != 'SKIP':
        patch_package(package)
    if package['preinstall'] != 'SKIP':
        preinstall_package(package)
    if package['configure'] != 'SKIP':
        configure_package(package)
    if package['prebuild'] != 'SKIP':
        prebuild_package(package)
    if package['build'] != 'SKIP':
        build_package(package)
    if package['postbuild'] != 'SKIP':
        postbuild_package(package)
    if package['test'] != 'SKIP':
        test_package(package)


    test_confirm = input('Are tests successful? Continue? [y/N] ')
    if test_confirm.upper() != 'Y':
        print('Stop! Check the tests and fix before continue.')
        return

    if package['posttest'] != 'SKIP':
        posttest_package(package)
    if package['install'] != 'SKIP':
        install_package(package)
    if package['postinstall'] != 'SKIP':
        postinstall_package(package)
    cleanup(package)
        
    print(f'Done! {package["name"]}-{package["version"]} successfully installed.')


def download_only(package: dict):
    '''
    This flow download the source file and stops.

    Args:
        package: dict - package struct
    '''
    download_package(package)


def patch_only(package: dict):
    '''
    This function applies patches to the package and stop.
    
    Args:
        package: dict - package struct
    '''
    unpack_package(package)

    if package['patch'] != 'SKIP':
        patch_package(package)

    print(f'Done! {package["name"]}-{package["version"]} successfully patched.')


def uninstall(package: dict):
    '''
    This function uninstall the package

    Args:
        package: dict - package struct of the package to uninstall
    '''
    pass


def main():
    '''
    This is the main function of hpm - Hive Package Manager.
    It orcestrates the package management flow.

    Args:
        -i, --install: Full installation
    '''
    description = 'This tool helps to manage packages in custom LFS installation'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('target', type=str, help='Package to manage')

    flags = parser.add_mutually_exclusive_group()
    flags.add_argument('-d', '--download', action='store_true', help='Only download package source file')
    flags.add_argument('-i', '--install', action='store_true', help='Full installation')
    flags.add_argument('-p', '--patch', action='store_true', help='Only patch package and stop')
    flags.add_argument('-s', '--show', action='store_true', help='Name of the package to show')
    flags.add_argument('-l', '--list', action='store_true', help='List all packages')

    args = parser.parse_args()
    
    target = args.target

    if not (args.install or args.patch or args.show or args.list or args.download):
        print('Provide at least one action')
        return

    if target:
        # Separate flow to list all packages
        if args.list:
            if target == 'ALL' or target == 'INSTALLED':
                installed = False
                if target == 'INSTALLED':
                    installed = True
                list_packages(installed)
                return
            else:
                print('Use only ALL or INSTALLED with -s')
                return

        package = get_package(target)

        if package is None:
            return
        
        if args.install:
            full_install(package)
        elif args.download:
            download_only(package)
        elif args.patch:
            patch_only(package)
        elif args.show:
            print(package)

        # TODO: Workflow is different for uninstall
        #uninstall_package(package)


if __name__ == '__main__':
    main()

