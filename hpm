#!/usr/bin/env python3

import argparse
import os
import subprocess

from sqlite3 import connect, Error
from yaml import safe_load

HPM_DB = os.getenv('HPM_DB')
SRC_DIR = os.getenv('HPM_SRC_DIR')
PKG_DEF_DIR = os.getenv('HPM_PKG_DEF_DIR')


def get_package(target: str):
    '''
    This function returns package entry from database

    Args:
        target: str - target package
    '''
    filename = f'{PKG_DEF_DIR}/{target}.yaml'
    with open(filename, 'r') as package_file:
        package_struct = safe_load(package_file)

    return package_struct


def list_packages(installed: bool):
    '''
    This function list all packages in HPM DB.
    
    Args:
        installed: bool - True if required to output only installed packages
    '''
    try:
        conn = connect(HPM_DB)
        cursor = conn.cursor()

        if installed:
            cursor.execute('''SELECT name, version FROM package_info WHERE installed = 'yes';''')
        else:
            cursor.execute('SELECT name, version FROM package_info')

        row = cursor.fetchall()

        for package in row:
            print(f'{package[0]}-{package[1]}')
    
    except Error as err:
        print(f'An error occured: {err}')
    
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


def update_database(package: dict, action: str = 'add'):
    '''
    This function adds new entry into the database after the package is intstalled

    Args:
        package: dict - package to install
        action: str - action to perform
    '''
    try:
        conn = connect(HPM_DB)
        cursor = conn.cursor()

        if action == 'add':
            cursor.execute('''
                INSERT OR REPLACE INTO package_info (name, version, url, installed) VALUES (?, ?, ?, ?)
                ''', (package['name'], package['version'], package['url'], 'yes'))
        elif action == 'delete':
            cursor.execute('DELETE FROM package_info WHERE name = ? AND version = ?',
                           (package['name'], package['version']))

        conn.commit()
    except Error as err:
        print(f'An error occured: {err}')

    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


def get_package_filename(package: dict):
    '''
    This function extracts archive name and filename from package URL

    Args:
        package: dict - package struct
    '''
    url = package['url']
    archive_filename = os.path.basename(url)

    # TODO: It works only with tarballs, change it to support any file
    # TCL has different archive names and directory inside
    if package['name'] == 'tcl':
        package_dirname = f'{package["name"]}{package["version"]}'
    else:
        package_dirname = archive_filename.split('.tar')[0]

    return archive_filename, package_dirname


def download_package(package: dict):
    '''
    This function downloads the package tarball using its url.

    Args:
        package: dict - package struct
    '''
    url = package['url']

    subprocess.run(['wget', '-nc', '-P', SRC_DIR, url])


def unpack_package(package: dict):
    '''
    This function unpacks the source tarball of the package and enter the directory

    Args:
        package: dict - package struct of the package to unpack
    '''
    os.chdir(SRC_DIR)
    
    archive_filename, package_dirname = get_package_filename(package)
    
    print(f'Unpacking {archive_filename}...')
    subprocess.run(['tar', '-xf', archive_filename], check=True)

    os.chdir(package_dirname)


def patch_package(package: dict):
    '''
    This function applies all available patches for the package

    Args:
        package: dict - package struct
    '''
    patches = [patch for patch in package['patch'] if patch]

    for patch in patches:
        print(f'Patching {package["name"]} with {patch}...')
        subprocess.run(patch, shell=True)


def preinstall_package(package: dict):
    '''
    This function runs preinstallation scripts for the package

    Args:
        package: dict - package struct
    '''
    preinstall_scripts = [preinst for preinst in package['preinstall'] if preinst]

    # List of exceptions: enter a separate build folder first
    for preinstall_script in preinstall_scripts:
        print(f'Running preinstall script {preinstall_script}...')
        subprocess.run(preinstall_script, shell=True)


def configure_package(package: dict):
    '''
    This function configures the package

    Args:
        package: dict - package struct
    '''
    # List of exceptions: packages use separate folder to build
    configure_command = package['configure']

    print(f'Configuring the package with config options: {configure_command}...')
    subprocess.run(configure_command, shell=True)


def build_package(package: dict):
    '''
    This function builds the package

    Args:
        package: dict - package struct
    '''
    build_command = package['build']

    print(f'Building the package with options: {build_command}...')
    subprocess.run(build_command, shell=True)


def postbuild_package(package: dict):
    '''
    This function runs postbuild scripts for the package

    Args:
        package: dict - package struct
    '''
    postbuild_scripts = [postbuild for postbuild in package['postbuild'] if postbuild]

    for postbuild_script in postbuild_scripts:
        print(f'Running postbuild script {postbuild_script}...')
        subprocess.run(postbuild_script, shell=True)


def test_package(package: dict):
    '''
    This function run the tests for the package

    Args:
        package: dict - package struct
    '''
    test_command = package['test']

    print(f'Testing the package with options: {test_command}...')
    subprocess.run(test_command, shell=True)


def posttest_package(package: dict):
    '''
    This function runs post test scripts for the package

    Args:
        package: dict - package struct
    '''
    posttest_scripts = [posttest for posttest in package['posttest'] if posttest]

    for posttest_script in posttest_scripts:
        print(f'Running post test script {posttest_script}...')
        subprocess.run(posttest_script, shell=True)


def install_package(package: dict):
    '''
    This function install the package

    Args:
        package: dict - package struct
    '''
    install_command = package['install']

    print(f'Installing the package with options: {install_command}...')
    subprocess.run(install_command, shell=True)

    update_database(package)


def postinstall_package(package: dict):
    '''
    This function runs postinstall scripts for the package

    Args:
        package: dict - package struct
    '''
    postinstall_scripts = [postinstall for postinstall in package['postinstall'] if postinstall]

    for postinstall_script in postinstall_scripts:
        print(f'Running postinstall script {postinstall_script}...')
        subprocess.run(postinstall_script, shell=True)


def uninstall_package(package: dict):
    '''
    This function uninstalls the package

    Args:
        package: dict - package struct
    '''
    uninstall_scripts = [uninstall for uninstall in package['uninstall'] if uninstall]

    for uninstall_script in uninstall_scripts:
        print(f'Running uninstall script {uninstall_script}...')
        subprocess.run(uninstall_script, shell=True)
    
    update_database(package, 'delete')


def cleanup(package: dict):
    '''
    This functions cleans everything up after installation or uninstallation

    Args:
        package: dict - package struct of the managed package
    '''
    os.chdir(SRC_DIR)

    _, package_dirname = get_package_filename(package)

    print('Deleting source directory...')
    subprocess.run(['rm', '-rf', package_dirname])


def full_install(package: dict):
    '''
    This function follow the workflow of full installation.
    This is the most common usage of this tool.

    Args:
        package: dict - package struct of the package to be installed
    '''
    print(f'Installing package {package["name"]}-{package["version"]}...')

    download_package(package)
    
    unpack_package(package)

    if package['patch'] != 'SKIP':
        patch_package(package)
    if package['preinstall'] != 'SKIP':
        preinstall_package(package)
    if package['configure'] != 'SKIP':
        configure_package(package)
    if package['build'] != 'SKIP':
        build_package(package)
    if package['postbuild'] != 'SKIP':
        postbuild_package(package)
    if package['test'] != 'SKIP':
        test_package(package)


    test_confirm = input('Are tests successful? Continue? [y/N] ')
    if test_confirm.upper() != 'Y':
        print('Stop! Check the tests and fix before continue.')
        return

    if package['posttest'] != 'SKIP':
        posttest_package(package)
    if package['install'] != 'SKIP':
        install_package(package)
    if package['postinstall'] != 'SKIP':
        postinstall_package(package)
    cleanup(package)
        
    print(f'Done! {package["name"]}-{package["version"]} successfully installed.')


def download_only(package: dict):
    '''
    This flow download the source file and stops.

    Args:
        package: dict - package struct
    '''
    download_package(package)


def patch_only(package: dict):
    '''
    This function applies patches to the package and stop.
    
    Args:
        package: dict - package struct
    '''
    unpack_package(package)

    if package['patch'] != 'SKIP':
        patch_package(package)

    print(f'Done! {package["name"]}-{package["version"]} successfully patched.')


def configure_only(package: dict):
    '''
    This function applies patches, run preinstall scripts and configure script and then stop.
    
    Args:
        package: dict - package struct
    '''
    unpack_package(package)

    if package['patch'] != 'SKIP':
        patch_package(package)
    if package['preinstall'] != 'SKIP':
        preinstall_package(package)
    if package['configure'] != 'SKIP':
        configure_package(package)

    print(f'Done! {package["name"]}-{package["version"]} successfully configured.')


def build_only(package: dict):
    '''
    This function applies patches, run preinstall scripts, configure script, build and then stop.
    
    Args:
        package: dict - package struct
    '''
    unpack_package(package)

    if package['patch'] != 'SKIP':
        patch_package(package)
    if package['preinstall'] != 'SKIP':
        preinstall_package(package)
    if package['configure'] != 'SKIP':
        configure_package(package)
    if package['build'] != 'SKIP':
        build_package(package)


def patch_only(package: dict):
    '''
    This function applies patches to the package and stop.
    
    Args:
        package: dict - package struct
    '''
    unpack_package(package)

    if package['patch'] != 'SKIP':
        patch_package(package)

    print(f'Done! {package["name"]}-{package["version"]} successfully patched.')


def uninstall(package: dict):
    '''
    This function uninstall the package

    Args:
        package: dict - package struct of the package to uninstall
    '''
    if package['uninstall'] != 'SKIP':
        uninstall_package(package)


def main():
    '''
    This is the main function of hpm - Hive Package Manager.
    It orcestrates the package management flow.

    Args:
        -i, --install: Full installation
        TODO: add other keys
    '''
    description = 'This tool helps to manage packages in custom LFS installation'

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('target', type=str, help='Package to manage')

    flags = parser.add_mutually_exclusive_group()
    flags.add_argument('-d', '--download', action='store_true', help='Only download package source file')
    flags.add_argument('-i', '--install', action='store_true', help='Full installation')
    flags.add_argument('-p', '--patch', action='store_true', help='Only patch package and stop')
    flags.add_argument('-s', '--show', action='store_true', help='Name of the package to show')
    flags.add_argument('-l', '--list', action='store_true', help='List all packages')
    flags.add_argument('-u', '--uninstall', action='store_true', help='Uninstall package')
    flags.add_argument('-c', '--configure', action='store_true', help='Only configure package and stop')
    flags.add_argument('-b', '--build', action='store_true', help='Only build package and stop')

    args = parser.parse_args()
    
    target = args.target

    if not (args.install or args.patch or args.show or args.list or args.download or args.uninstall or args.configure or build):
        print('Provide at least one action')
        return

    if target:
        # Separate flow to list all packages
        if args.list:
            if target == 'ALL' or target == 'INSTALLED':
                installed = False
                if target == 'INSTALLED':
                    installed = True
                list_packages(installed)
                return
            else:
                print('Use only ALL or INSTALLED with -s')
                return

        package = get_package(target)

        if package is None:
            return
        
        if args.install:
            full_install(package)
        elif args.download:
            download_only(package)
        elif args.patch:
            patch_only(package)
        elif args.configure:
            configure_only(package)
        elif args.build:
            build_only(package)
        elif args.show:
            print(package)
        elif args.uninstall:
            uninstall(package)


if __name__ == '__main__':
    main()

